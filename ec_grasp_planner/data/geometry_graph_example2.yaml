msg_to_pcl:
  type: ecto_rbo_pcl::PCDReader
  inputs:
    {}
#  format: 3
  filename: eval(os.path.join(rospack.get_path("ec_grasp_planner"), "data/ifco.pcd"))
create_tf:
  type: ecto_rbo_pcl::CreateTF
  position: [0, 0, 0]
  rotation_xyzw: [0, 0, 0, 1]
tf_send_camera:
  type: ecto_rbo_pcl::BroadcastTF
  inputs:
    transform: create_tf/transform
  source_frame: camera_rgb_optical_frame
  target_frame: base_frame

# crops off the camera far point cloud parts 
crop_box:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::PassThroughOrganized>
  inputs:
    input: msg_to_pcl/output
  filter_field_name: z
  filter_limit_max: 1.0
  filter_limit_min: 0
  filter_limit_negative: false


# ------------------------------------------------------------------------
# Table detection
# ------------------------------------------------------------------------

normal_estimation:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::NormalEstimationIntegral>
  inputs:
    input: crop_box/output
  estimation_method: 0
  max_depth_change_factor: 0.05
  smoothing_size: 30

flood_fill:
  type: ecto::pcl::PclCellWithNormals<ecto_rbo_pcl::FloodFill>
  inputs:
    input: crop_box/output
    normals: normal_estimation/output
  angular_threshold: 0.1859879
  curvature_distance_threshold: 0.15
  curvature_threshold: 0.017
  distance_threshold: 0.05
  min_inliers: 50
  normal_distance_threshold: 0.12
  rviz_prefix: flood_fill_segmentation

table_fits:
  type: ecto::pcl::PclCellWithNormals<ecto_rbo_pcl::PlaneFits>
  inputs:
    clusters: flood_fill/clusters
    input: crop_box/output
    normals: normal_estimation/output
  distance_threshold: 45.05
  max_size: 10.24
  min_boxness: 0.0
  min_inlier_ratio: 0.0
  min_size: 0.00
  weight_contour: 0.0
  polygon_approximation_epsilon: 40.0

# ------------------------------------------------------------------------
# Ifco (Publish Specifications +  Detection)
# ------------------------------------------------------------------------

ifco_specifications:
  type: ecto_rbo_pcl::BroadcastIfcoSpecifications
  ifco_length: 0.53 #0.56
  ifco_width: 0.35 #0.38
  ifco_height: 0.16
  # [wall 1, wall2, wall 3, wall 4] defined counterclockwise
  ec_wall_offset: [0.0, 0.0, 0.0, 0.0] # this is the space an ec occludes inside the ifco at wall 1, wall2, etc..

ifco_detection:
  type: ecto::pcl::PclCellWithNormals<ecto_rbo_pcl::IfcoDetection>
  inputs:
    input: crop_box/output
    normals: normal_estimation/output
    bounded_planes: table_fits/bounded_models
    bounded_planes_biggest: table_fits/bounded_model_biggest
    ifco_length: ifco_specifications/ifco_length
    ifco_width: ifco_specifications/ifco_width
    ifco_height: ifco_specifications/ifco_height
  plane_id: -1
  tableDist: 0.2
  # SHOULD BE TUNED FOR EVERY EXPERIMENT SETUP
  # Ocado's ICP detection results in a slightly shifted ifco frame. 
  # This param is applied on the z-Axis of the ifco frame to correct the shift. 
  # 0.02 for camera on the robot arm 0.005 for the almost extended camera tripod in the lab

  icp_offset: 0.004 


tf_send_ifco:
  type: ecto_rbo_pcl::BroadcastTF
  inputs:
    transform: ifco_detection/ifco_transform
  source_frame: camera_rgb_optical_frame
  target_frame: ifco


# Clean up transform data for later use
tf_to_vector_table:
  type: ecto_rbo_pcl::TF2Vector
  inputs:
    transform: ifco_detection/ifco_transform
  column_index: 2
  negate: false
wrap_in_vector_table:
  type: ecto_rbo_pcl::WrapVector3fInVector
  inputs:
    input: tf_to_vector_table/vector


# ------------------------------------------------------------------------
# Crop the inside of the Ifco box
# ------------------------------------------------------------------------

inside_ifco:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::CropBox>
  inputs:
    input: crop_box/output
    transform: ifco_detection/ifco_transform
  default_min: [-0.24,  -0.13, 0.02, 0] #[-0.24,  -0.16, 0.02, 0]
  default_max: [0.24,  0.13,  0.20, 0] #[0.24,  0.16,  0.20, 0]
  publish_rviz_markers: true 

# ------------------------------------------------------------------------
# Object Detection (consider only pointcloud inside the ifco)
# ------------------------------------------------------------------------

# Cluster the objects in the IFCO
region_growing_rgb:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::RegionGrowingRGB>
  inputs:
    input: crop_box/output
    indices: inside_ifco/indices2
  min_cluster_size: 350
  distance_threshold: 1000
  point_color_threshold: 35.0
  region_color_threshold: 50.0


# filter object by distance to table
filter_by_distance:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::FilterClustersBySize>
  inputs:
    input: crop_box/output
    clusters: flood_fill/clusters
    transform: table_fits/transform_biggest
  max_volume: 0.004
  min_volume: 0.
  filter_criterion: 2
  max_distance: 0.3
  min_size: 200
  max_size: 1000


merge_clusters:
  type: ecto_rbo_pcl::MergeClusters
  inputs:
    cluster_0: region_growing_rgb/output
    cluster_1: filter_by_distance/filtered_clusters
filter_object_by_size:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::FilterClustersBySize>
  inputs:
    input: inside_ifco/output
    clusters: merge_clusters/merged_clusters
  max_volume: 0.004
  min_volume: 0.
  filter_criterion: 1
  max_distance: 0.2
  min_size: 120
  max_size: 2000
# Commented out for Multi Object Detection 
# # Pick one object - the closest to the camera
# filter_closest_object:
#   type: ecto::pcl::PclCell<ecto_rbo_pcl::ExtractClosestCluster>
#   inputs:
#     input: crop_box/output
#     clusters: region_growing_rgb/output
#     transform: ifco_detection/ifco_transform
#   size_weight: 0

# Calculate the centroid and the bounding box
calculate_centroids:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::Centroid>
  inputs:
    input: crop_box/output
    clusters: region_growing_rgb/output
    #clusters: filter_closest_object/closest_cluster # For Single Object Detection 
bbox_fits:
  type: ecto::pcl::PclCell<ecto_rbo_pcl::PlaneFits2D>
  inputs:
    input: crop_box/output
    clusters: region_growing_rgb/output
    #clusters: filter_closest_object/closest_cluster # For Single Object Detection 
    normal: tf_to_vector_table/vector
bbox_to_axis:
  type: ecto_rbo_pcl::TFs2Vectors
  inputs:
    transforms: bbox_fits/transforms
  column_index: 0
  negate: false

# Broadcast object location
take_first_tf:
  type: ecto_rbo_pcl::Vector2TF
  inputs:
    input: bbox_fits/transforms
tf_send_object:
  type: ecto_rbo_pcl::BroadcastTF
  inputs:
    transform: take_first_tf/output
  source_frame: camera_rgb_optical_frame
  target_frame: object

# Broadcast object data
send_objects:
  type: ecto_rbo_grasping::PublishObjectList
  inputs:
    transforms: bbox_fits/transforms
    sizes: bbox_fits/sizes
  frame: camera_rgb_optical_frame





# ------------------------------------------------------------------------
#  Environmental Constraint Exploitation (ECE) Graph Generation
# ------------------------------------------------------------------------

# Initial approach primitive
positioning_motions:
  type: ecto::pcl::PclCellWithNormals<ecto_rbo_grasping::PositioningMotions>
  inputs:
    input: crop_box/output
    normals: normal_estimation/output

# Create top grasp primitive
create_top_down_grasps:
  type: ecto_rbo_grasping::CreateGrasps
  inputs:
    header: msg_to_pcl/header
    positions: calculate_centroids/centroids
    approach_vectors: wrap_in_vector_table/vector
    roll_vectors: bbox_to_axis/vectors
  strategy: 10  # SQUEEZE
  pregrasp_configuration: 2 # SPHERE
  roll_offset: 0 #-1.5707963267948966   #3.141592653589793

# Create slide primitives
planar_manifolds:
  type: ecto::pcl::PclCellWithNormals<ecto_rbo_grasping::ManifoldsPlanar>
  inputs:
    input: crop_box/output
    normals: normal_estimation/output
    bounded_planes: ifco_detection/ifco_planes_biggest
  all_in_plane_orientations: true 
  rotation: 0

# wall grasps inside the ifco
ifco_grasps:
  type: ecto::pcl::PclCellWithNormals<ecto_rbo_grasping::IfcoGrasps>
  inputs:
    input: crop_box/output
    normals: normal_estimation/output
    ifco_planes: ifco_detection/ifco_planes
    ifco_length: ifco_specifications/ifco_length
    ifco_width: ifco_specifications/ifco_width
    ifco_height: ifco_specifications/ifco_height

# combine all grasping primitives into one final ECE graph
planner:
  type: ecto_rbo_grasping::CreateGeometryGraph
  inputs:
    positioning_pregrasp_messages: positioning_motions/positioning_pregrasp_messages
    positioning_motion_manifolds: positioning_motions/positioning_manifolds
    pushing_pregrasp_messages: planar_manifolds/pushing_pregrasp_messages
    pushing_motion_manifolds: planar_manifolds/manifolds
    surface_pregrasp_messages: create_top_down_grasps/pregrasp_messages
    surface_grasp_manifolds: planar_manifolds/manifolds
    wall_pregrasp_messages: ifco_grasps/wall_pregrasp_messages
    wall_grasp_manifolds: ifco_grasps/wall_manifolds
  ignore_manifold_intersection: true

publish_graph:
  type: ecto_rbo_grasping::PublishGeometryGraph
  inputs:
    graph_message: planner/graph_message